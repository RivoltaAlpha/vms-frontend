// src/features/users/usersAPI.ts
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { TUser } from '../../types/types';


export const usersAPI = createApi({
    reducerPath: 'usersAPI',
    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:8000' }),
    tagTypes: ['getUsers', 'createUser', 'updateUser', 'deleteUser'],
    endpoints: (builder) => ({
        getUsers: builder.query<TUser[], void>({
            query: () => 'users',
            providesTags: ['getUsers'],
        }),
        createUser: builder.mutation<TUser, Partial<TUser>>({
            query: (newUser) => ({
                url: 'users',
                method: 'POST',
                body: newUser,
            }),
            invalidatesTags: ['getUsers', 'createUser'],
        }),
        updateUser: builder.mutation<TUser, Partial<TUser>>({
            query: ({ id, ...rest }) => ({
                url: `users/${id}`,
                method: 'PUT',
                body: rest,
            }),
            invalidatesTags: ['getUsers', 'updateUser'],
        }),
        deleteUser: builder.mutation<{ success: boolean; id: number }, number>({
            query: (id) => ({
                url: `users/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: ['getUsers', 'deleteUser'],
        }),
    }),
});

// the outside "thunk creator" function
// const fetchUserById = userId => {
//   // the inside "thunk function"
//   return async (dispatch, getState) => {
//     try {
//       // make an async call in the thunk
//       const user = await usersAPI.fetchById(userId)
//       // dispatch an action when we get the response back
//       dispatch(userLoaded(user))
//     } catch (err) {
//       // If something went wrong, handle it here
//     }
//   }
// }

// Export autogenerated hooks
export const {
    useGetUsersQuery,
    useCreateUserMutation,
    useUpdateUserMutation,
    useDeleteUserMutation,
} = usersAPI;
